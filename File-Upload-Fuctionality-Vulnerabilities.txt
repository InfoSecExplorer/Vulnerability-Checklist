*Open direction via profile image
* Check the target platform you're working on and identify which image extensions are allowed for profile image uploads (e.g., .jpg, .png, .svg).
* Create a new SVG file (image.svg) with the following code:

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<svg onload="window.location='https://google.com'" xmlns="http://www.w3.org/2000/svg">
  <rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
</svg>
* Upload the SVG File as Profile Image.
* Open the uploaded avatar image in a new window or tab.
* Observe the behavior. If the code works, you will be redirected to https://google.com.

* Cross-site scripting(XSS) via profile image
* Create a new SVG file (xss_image.svg) with the following code:
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg">
  <rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
  <script type="text/javascript">
    alert("XSS by noor");
  </script>
</svg>

* Upload the XSS SVG File as Profile Image.
* Open the uploaded avatar image in a new window or tab.
* Observe the behavior. If the code works, an alert box with the message "XSS by noor" will pop up.
* reference: https://0xkemo.medium.com/how-i-was-able-to-find-2-stored-xss-via-svg-file-upload-273d1609a057, https://infosecwriteups.com/stored-xss-using-svg-file-2e3608248fae, https://medium.com/@paxnull/stored-xss-via-file-upload-using-svg-file-c1e2a33ed8a8

* Insecure Data Storage
* Go to your target website and upload a profile photo.
* Right click on the photo and click on view image.
* Now a link will open where your photo is uploaded like : https://www.example.com/<id>/photo.jpg.
* Copy the link and save it in notepad.
* Now delete your account and then visit the link.
* If your still able to see the photo means it is vulnerable to Insecure Data Storage.


Test SQL Injection Vulnerability

Go to the login page of your target application in your browser and attempt to log in with any credentials. Burp Suite will capture the request.
In Burp Suite, find the intercepted request in the tab. Send this request to the “save items” by right-clicking.
Save the request to a file, for example, request.
Use SQLMap to exploit the identified vulnerability: sqlmap -r request.txt --batch --dbs
Reference: https://medium.com/@sachinkewat809/exposing-login-page-vulnerabilities-with-time-based-sql-injection-694a04911e93, https://ms-official5878.medium.com/time-based-blind-sql-injection-identification-and-exploitation-976ad2c97d7e


XSS through File Upload works

1. File Upload functionality in the web page which allows users to upload photos.
2. In next step, I have created filename as a malicious XSS payload using kali linux because windows system doesn’t allow us to save malicious characters in the file name.
3. Payload Used: “><img src=x onerror=alert(document.domain)>.jpg (as a Filename).
4. In my kali linux, I have ran the web application and upload the malicious file as a photo. Once click on Upload button, Below prompt getting displayed which proves application is vulnerable to XSS through File Upload.

Session Hijacking

* Login to the application as admin user using credentials.
* click on Cookie editor extension.
* Copy Session cookie. Don’t logout admin or else cookie expire. Then login into application as normal user in new incognito window.
* Replace normal users’ cookie by admin cookie and update it.
* Refresh page if you are getting admin session instead of normal user’s session means session hijacking is there.
* https://ms-official5878.medium.com/session-hijacking-2936a7a5ad88

Account Takeover:

1. Create an account on the site.
2. Logout and click on "Forgot Password."
3.If you receive an OTP, enter it correctly, and intercept the request.
4.Check the response for any user ID. If found, try changing the value. A successful attempt would indicate the site is vulnerable to a complete account takeover.

Cookie-based XSS Impact: 

1. Access the target site and inspect the cookies. 
2. Inject a malicious script in the cookie value (<script>alert('document.cookie');</script>)
3. Reload the page to trigger the script execution.
4. Observe the unauthorized action or data theft. 


dirsearch.py -l target.txt -e php,asp,aspx,jsp,py,txt,conf,config,bak,backup,swp,old,db,sqlasp,aspx,aspx~,asp~,py,py~,rb,rb~,php,php~,bak,bkp,cache,cgi,conf,csv,html,inc,jar,js,json,jsp,jsp~,lock,log,rar,old,sql,sql.gz,sql.zip,sql.tar.gz,sql~,swp,swp~,tar,tar.bz2,tar.gz,txt,wadl,zip -i 200 — full-url
